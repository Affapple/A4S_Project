name: A4S-eval pipeline for github ported from gitlab

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master]

env:
  UV_VERSION: ${{ vars.A4S_EVAL_UV_VERSION }}
  PYTHON_VERSION: ${{ vars.A4S_EVAL_PYTHON_VERSION }}
  BASE_LAYER: ${{ vars.A4S_EVAL_BASE_LAYER }}
  UV_LINK_MODE: "copy"
  UV_CACHE_DIR: ".uv-cache"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  checks:
    name: Linting and formatting stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          restore-cache: true
      - name: Install dependencies
        run: uv sync
      - name: Do the linting
        run: uv run ruff check .
      - name: Do the format check
        run: uv run ruff format --check .

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          restore-cache: true
      - name: Install test dependencies
        run: uv sync --frozen --no-dev --group test
      - name: Run tests
        run: uv run pytest
  
  build:
    name: Build image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    
    needs: [checks,test]
    steps:
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}